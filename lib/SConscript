Import('env')

# Helper to check for pkg-config itself
def CheckPKGConfig(context, version):
     context.Message( 'Checking for pkg-config... ' )
     ret = context.TryAction('pkg-config --atleast-pkgconfig-version=%s' % version)[0]
     context.Result( ret )
     return ret

# Helper to check for certain pkgs using pkg-config
def CheckPKG(context, name):
     context.Message( 'Checking for %s... ' % name )
     ret = context.TryAction('pkg-config --exists \'%s\'' % name)[0]
     context.Result( ret )
     return ret

# Make sure they're called
conf = Configure(env, custom_tests = { 'CheckPKGConfig' : CheckPKGConfig,
                                       'CheckPKG' : CheckPKG })

if not conf.CheckPKGConfig('0.15.0'):
     print('pkg-config >= 0.15.0 not found.')
     Exit(1)

if not conf.CheckPKG('libmpdclient'):
    print('libmpdclient headers not found.')
    Exit(1)

if not conf.CheckPKG('glib-2.0'):
    print('GLib Headers/Libs not found.')
    Exit(1)

# Finish configuration
env = conf.Finish()

# Actually add link/cflags:
env.ParseConfig('pkg-config --cflags --libs libmpdclient glib-2.0')

# Make it a high warnlevel, also enable debugging
env.Append(CCFLAGS = ['-std=c99'])
env.Append(CCFLAGS = ['-Os', '-Wall', '-W'])

# Build libmoosecat.so
# Building a .so is more sane since we need to
# specify linkflags only once
libmoosecat = env.SharedLibrary('moosecat',
    [
    'mpd/protocol.c',
    'mpd/client.c',
    'mpd/update.c',
    'mpd/signal.c',
    'mpd/signal_helper.c',
    'mpd/pm/idle_core.c',
    'mpd/pm/cmnd_core.c',
    'mpd/pm/common.c',
    'util/gasyncqueue-watch.c',
    'store/query.c',
    'store/db.c'
    ],
    LIBS=['glib-2.0', 'mpdclient'])

# Make it visible to other SConscripts
Export('libmoosecat')

## CONFIG.H #
def print_config(msg, two_dee_iterable):
    # this function is handy and can be used for other configuration-printing tasks
    print('\n', msg, '\n')
    for key, val in two_dee_iterable:
        print("    %-20s %s" % (key, val))

    print('\n')

def config_h_build(target, source, env):

    config_h_defines = {
        # this is where you put all of your custom configuration values
        # "install_prefix": prefix_variable_fed_by_user,
        "version_str": "1.0"
        #"debug": debug # this is an int.  1 for true, 0 for false
    }

    print_config("Generating config.h with the following settings:",
                  config_h_defines.items())

    for a_target, a_source in zip(target, source):
        config_h = file(str(a_target), "w")
        config_h_in = file(str(a_source), "r")
        config_h.write(config_h_in.read() % config_h_defines)
        config_h_in.close()
        config_h.close()

env.AlwaysBuild(env.Command('config.h', 'config.h.in', config_h_build))


# Temporarily playground
Default(env.Program(target='runner',
    LIBS=[libmoosecat, 'glib-2.0', 'mpdclient'],
    LIBPATH='.',
    source = ['main.c']))

